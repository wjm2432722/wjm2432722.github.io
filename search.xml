<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Passive-interface（被动接口）及单播更新(转载红茶三杯的博客)</title>
      <link href="/2019/03/23/passvie-jie-kou/"/>
      <url>/2019/03/23/passvie-jie-kou/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-被动接口">一、被动接口</span></h1><h2><span id="1特性概述">1.特性概述</span></h2><p><img src="/2019/03/23/passvie-jie-kou/111.png" alt></p><p>在上图所示的拓扑中，R1、R2运行OSPF，R2在其FE0/0及FE1/0接口上都激活了OSPF。FE1/0接口一旦激活OSPF，便开始周期性地发送Hello报文试图在该链路上发现邻居，但是在该链路上并没有邻居（只有终端用户），因此这些Hello报文只是增加PC的额外负担而已。<br>针对上面的问题，我们可以将路由器上的FE1/0口设置为passive-interface，如此一来，这个接口将不再收发Hello报文。既然不收发Hello报文，自然就不会在这个接口上形成邻接关系，但是FE1/0接口依然会被R2的Type-1 LSA描述，因此R1依然可以通过OSPF学习到192.168.1.254/24网段的路由。</p><h2><span id="2相关要点">2.相关要点</span></h2><p>RIP、EIGRP、OSPF、ISIS协议均支持passive-interface（也被称为被动接口）特性，但是该特性在每个协议上不尽相同，区别如下:</p><p><img src="/2019/03/23/passvie-jie-kou/222.png" alt></p><p>当然，我们在路由协议中将某个接口设置为passive-interface的前提是使用network关键字宣告了这个接口的网段，否则passive-interface就没有意义了。passive-interface特性通常被用于某个接口的网段路由需要被其他路由器学习到，但是这个接口本身可能连接着一个末梢网络（只有主机，没有其他的路由器）的场景。 </p><h2><span id="3配置实现">3.<strong>配置实现</strong></span></h2><p><strong>将某个接口配置为被动接口：</strong></p><p>Router(config-router)# passive-interface int-type int-num</p><p><strong>将所有接口配置为被动接口，并手动激活特定接口：</strong></p><p>Router(config-router)# passive-interface default</p><p>Router(config-router)# no passive-interface int-type int-num</p><p><strong>典型配置示例：</strong></p><p><img src="/2019/03/23/passvie-jie-kou/333.png" alt></p><p>这是一个非常典型的场景，GS_SW是汇聚层交换机，与核心交换机之间跑个OSPF。GS_SW需要通告设备上VLAN所对应的网段，以便核心交换机能够获知相关的路由。然后一旦GS_SW在OSPF进程中宣告这些VLAN对应的网段，相应的SVI接口就会向VLAN中去泛洪OSPF Hello报文，而这些报文，实际上是多余的，因为下面都是主机或终端。因此我们可以做如下配置：</p><p>interface vlan 10</p><p>  ip address 192.168.10.254 255.255.255.0</p><p>interface vlan 20</p><p>  ip address 192.168.20.254 255.255.255.0</p><p>router ospf 1</p><p>  network 192.168.10.0 0.0.0.255 area 1</p><p>  network 192.168.20.0 0.0.0.255 area 1</p><p>  network 192.168.254.0 0.0.0.255 area 0</p><p>  passive-interface defualt</p><p>  no passive-interface fastethernet 0/24</p><p>由于实际部署的时候，GS_SW上的VLAN可能比较多，SVI口也就非常多，如果一个个的去配置 passive-interface的话工作量可就大了，因此可以选择先使用passive-interface defaut命令将所有接口全部passive掉，然后再使用no passive-interface配置需要激活的接口，例如FE0/24口，这是用于和CO_SW对接OSPF的，因此需要no passive-interface该接口。</p><h1><span id="二-单播更新">二、单播更新</span></h1><h2><span id="1-配置rip单播更新"><strong>1. 配置RIP单播更新：</strong></span></h2><p><img src="/2019/03/23/passvie-jie-kou/444.png" alt></p><p>上图所示的环境中，R1、R2和PC同处一个广播域中，可能是连接在同一台二层交换机上，当R1及R2的接口激活RIP时，他们就会开始泛洪RIP报文，由于RIPv2是基于组播发送协议报文的，这就意味着PC也会源源不断地收到R1及R2周期性发送的RIP报文，而这实际上是白白增加PC的负担，因为它压根就不需要这些报文。这里就可以使用到单播更新这个特性。</p><p>R1的关键性配置如下：</p><p>R1(config) router rip</p><p>R1(config-router)# network 192.168.123.0</p><p>R1(config-router)# passive-interface fastethernet 0/0</p><p>R1(config-router)# neighbor 192.168.123.2</p><p>上面的配置中，先使用network关键字宣告相应的网段，然后将R1的FE0/0设置为passive-interface，则该接口将只接收且不再发送RIP报文，此时再搭配neighbor 192.168.123.2命令将使得R1使用单播、目的地址为192.168.123.2的RIP报文来发送路由更新。</p><p>R2的关键性配置如下：</p><p>R2(config) router rip</p><p>R2(config-router)# network 192.168.123.0</p><p>R2(config-router)# passive-interface fastethernet 0/0</p><p>R2(config-router)# neighbor 192.168.123.1</p><p>配置完成后，R1、R2之间交互RIP报文，就采用单播的方式进行，这样PC就不会受到影响。</p><h2><span id="2-配置-eigrp单播更新"><strong>2. 配置 EIGRP单播更新</strong></span></h2><p>注意：如果要求EIGRP实现单播更新，那么接口不能被配置为passive-interface（这与RIP不一样），而是直接使用neighbor命令去指定邻居即可。因为EIGRP接口一旦被设置为passive-interface，则即使手工指定了neighbor，也是无法正常建立EIGRP邻居关系的。</p><p>因此实现EIGRP单播更新，只需先使用network关键字将接口激活EIGRP，然后再搭配neighbor关键字指定特定邻居即可。</p><h2><span id="3-配置-ospf单播更新"><strong>3. 配置 OSPF单播更新</strong></span></h2><p>OSPF的neighbor命令使用上又与EIGRP不太一样。OSPF的neighbor命令只在NBMA及P2MP环境中使用。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由交换 </tag>
            
            <tag> 路由 </tag>
            
            <tag> ospf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为交换机配置SSH服务</title>
      <link href="/2019/03/20/hua-wei-jiao-huan-ji-pei-zhi-ssh-fu-wu/"/>
      <url>/2019/03/20/hua-wei-jiao-huan-ji-pei-zhi-ssh-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1><span id="华为交换机配置ssh服务">华为交换机配置SSH服务</span></h1><p>ssh authentication-type default password<br>ssh user admin<br>ssh user admin authentication-type password<br>ssh user admin service-type all</p><p>stelnet service enable</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由交换 </tag>
            
            <tag> 交换 </tag>
            
            <tag> ssh配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装（自用）</title>
      <link href="/2019/03/15/linux-an-zhuang-zi-yong/"/>
      <url>/2019/03/15/linux-an-zhuang-zi-yong/</url>
      
        <content type="html"><![CDATA[<h1><span id="linux起码分2个分区">linux起码分2个分区：</span></h1><p>第一个分区为swap，可以理解为windows的虚拟内存，swap就是linux的虚拟内存，正常为物理内存的2倍</p><p>第二个分区为/（根目录）可以把剩下空间都分给根目录</p><p>linux跟windows一样，最多可以分4个主分区，其余都为扩展分区。</p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSPF末节区域</title>
      <link href="/2019/03/15/ospf-mo-jie-qu-yu/"/>
      <url>/2019/03/15/ospf-mo-jie-qu-yu/</url>
      
        <content type="html"><![CDATA[<h1><span id="ospf末节区域">OSPF末节区域</span></h1><h2><span id="末节区域"><strong>末节区域</strong></span></h2><p><strong>末节区域</strong>即是stub area：其它区域产生的lsa，只有第三类lsa，也就是summary-lsa能进来，其它的4类，5类都会被ABR过滤掉。该区域内的路由器也不能引入外部路由。</p><h2><span id="完全末节"><strong>完全末节</strong></span></h2><p><strong>完全末节</strong>即是total stub：其它区域的lsa都进不来，包括第三类的，该区域的ABR会产生一个缺省的3类lsa，区域内其它路由器通过这条lsa，计算出默认路由。</p><h2><span id="次末节区域"><strong>次末节区域</strong></span></h2><p><strong>次末节区域</strong>：not-so-stubby ，也就是nssa区域，它与stub的区别是，这个区域可以引入外部路由。3类lsa可以进来，但4类和5类lsa仍然被过滤，引入的外部路由会以7类lsa的形式存在，ABR也会产生一个缺省的7类lsa，其它路由器通过这条lsa计算出默认路由。</p><h2><span id="完全次末节区域"><strong>完全次末节区域</strong></span></h2><p><strong>完全次末节区域</strong>：total nssa，与total stub类似，这个区域也是连3类lsa都过滤掉，即其它区域产生的lsa将无法进入该区域。但是ABR会产生一个缺省的3类lsa，其它路由器通过这条lsa计算出默认路由。</p><h2><span id="简单的说就是">简单的说，就是</span></h2><p><strong>stub</strong>过滤4,5类lsa，ABR会产生缺省的3类lsa，区域内不能引入外部路由</p><p><strong>total</strong> stub过滤3，4，5类lsa，ABR会产生缺省的3类lsa，区域内不能引入外部路由</p><p><strong>nssa</strong>过滤4，5类lsa，ABR会产生缺省的7类lsa，该区域能引入外部路由</p><p><strong>total nssa</strong>过滤3，4，5类lsa，ABR会产生缺省的3类lsa，该区域能引入外部路由</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由交换 </tag>
            
            <tag> 路由 </tag>
            
            <tag> ospf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LSA类型</title>
      <link href="/2019/03/14/lsa-lei-xing/"/>
      <url>/2019/03/14/lsa-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1><span id="lsa类型">LSA类型</span></h1><p>LSA类型定义了不同的路由器类型，因此需要多种LSA, 通常考试考Type1 , Type2, Type3,Type4,Type5, Type7。</p><h2><span id="type1"><strong>Type1</strong></span></h2><p>Type1 是Router LSA , 所有的OSPF speaker都会产生该类LSA，只在区域内传播，包括路由器自身的拓扑信息，和路由信息。</p><h2><span id="type2"><strong>Type2</strong></span></h2><p>Type2是Network LSA,只在MA网络中出现的2类LSA由DR产生，包括DR相连的所有网络的信息，只在区域内传播。</p><h2><span id="type3"><strong>Type3</strong></span></h2><p>Type3是Network summary LSA，由ABR产生，告知区域内路由器区域外的路由条目， 当有多个ABR时使用cost来确定，这个cost是由区域内路由器将外部路由cost和内部cost简单相加所得(metric-Type 1)， 而不是运行SPF算法，因此 可以说在区域内OSPF是一种链路状态协议，而在区域间是一种距离矢量协议。区域间路由的传递</p><h2><span id="type4"><strong>Type4</strong></span></h2><p>Type4是ASBR summary， 由ABR产生，用来广播ASBR的位置， 用show ip ospf database 可以看到Type4 LSA总是一个host mask 255.255.255.255，并且Type4是数据库中唯一没有Area 属性的LSA。</p><h2><span id="type5"><strong>Type5</strong></span></h2><p>Type5是external summary，由ASBR产生，是非OSPF设备的路由信息， 通常在一个大型网络中，路由器的数据库中会存在大量的此类LSA, 给路由器形成较重的负荷。因此我们可以用stub区域来限制此类LSA的传播。但是考虑以下情景，如果一台运行OSPF的路由器需要连接一个非OSPF网络net1，并将非OSPF网络中的路由条目通告到OSPF中，而又不想在数据库中保存大量的由其他路由器通告的外部网络路由，那么这时我们不可以用STUB，因为这将阻止所有的External路由，OSPF网络将丢失net1的路由信息，</p><h2><span id="type-7"><strong>Type 7</strong></span></h2><p>Type7因此被写入了OSPF标准。 为了解决这个问题， CISCO规定了NSSA， Type7在NSSA中传播External Route,在NSSA 的ABR上，Type7 被转换成Type5 （当然必须Type7 LSA P-bit=1），然后由ABR将这些路由条目通告到Backbone。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由交换 </tag>
            
            <tag> 路由 </tag>
            
            <tag> ospf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/03/13/pythoner-bi-hui-de-linux-ming-ling/"/>
      <url>/2019/03/13/pythoner-bi-hui-de-linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1><span id="pythoner-必会的linux命令">Pythoner 必会的linux命令</span></h1><blockquote><p>起因</p></blockquote><p>在日常工作中，学习linux是很痛苦的过程，此文主要列出日常开发所用常用命令行总结，并非linux命令完全指南性学习</p><blockquote><p>入门必看</p></blockquote><h5><span id="linux是什么">Linux是什么</span></h5><p><code>Linux</code> 是一个开源系统内核，1991年由托瓦兹 (Linus Torvalds) 开发出来的，我们平时讲的 <code>Liunx</code> 系统其实并不是很准确，<code>Ubuntu</code> <code>CentOS</code> 这些才是系统，<code>Linux</code> 是参考 <code>Unix</code> 系统开发出来的。</p><p>现实生活中有哪些软件或系统是基于 <code>Linux</code> 开发出来的呢？ <code>嵌入式</code> 程序开发 <code>Android</code> 手机系统，我们经常浏览的网站服务器，基本都是运行 <code>Linux</code> 系统之上。</p><p><code>Linux</code> 是一个支持多用户、多任务的系统。</p><p><code>Linux</code> 系统上一切都是以文件的形式存在，文件和目录名称都区分大小写的。所有文件命名要体现文件的格式或内容，<code>demo.php</code> 代表这是一个 <code>php</code> 文件，<code>demo.txt</code> 代表 <code>txt</code> 文件，<code>demo.tar.gz</code> 代表以 <code>gzip</code>压缩的打包文件。还有一种特殊文件，有文件也有目录，文件名称以 <code>.</code> 开头的隐藏文件，例如： <code>.vim</code> 默认是不显示的，一般都是软件的配置文件。</p><p>无论是源码编译安装还是通过包管理器 <code>yum</code> 或 <code>apt-get</code> 安装的软件，默认都是需要设置开机自启动，单纯的启动服务，如果服务器有重启的话，程序无法运行，还要登录服务器排查原因，费事费力。</p><h5><span id="关于linux命令的几个分类">关于Linux命令的几个分类</span></h5><ul><li>内置命令<ul><li>例如 <code>cd</code> <code>ls</code> 这些命令，默认系统内置无需安装</li></ul></li><li>外置命令<ul><li>例如 <code>ccat</code> <code>wget</code> ,如果执行命令提示 command not found ,通常都是需要用户自己使用 <code>apt-get</code> 或 <code>yum</code> 软件包管理器安装</li></ul></li><li>程序或软件命令<ul><li>例如 <code>nginx</code> <code>php</code> 或者自己写的程序编译出来的命令，这种命令与外置命令类似，但是会有配置等其他文件，外置命令一般安装之后只有一个二进制可执行文件</li></ul></li></ul><h5><span id="linux的优势">Linux的优势</span></h5><ul><li>跨平台</li><li>安全</li><li>多用户多任务</li><li>占用系统资源少</li><li>网络功能强大</li><li>稳定性 多作为企业服务器使用</li></ul><h5><span id="linux的运行级别">Linux的运行级别</span></h5><ul><li>0停机，关机</li><li>1 单用户，无网络连接，不运行守护进程，仅root用户可以登录</li><li>2 多用户， 无网络连接，不允许守护进程</li><li>3 多用户，正常启动系统</li><li>4 用户自定义</li><li>5 多用户，带图形界面</li><li>6 重启</li></ul><p>Linux的启动流程</p><ol><li>加载内核</li><li>启动初始化进程</li><li>确定运行级别</li><li>加载开机启动程序</li><li>用户登录</li><li>进入 login shell</li><li>打开 non-login shell</li></ol><h5><span id="linux-的目录结构">Linux 的目录结构</span></h5><p>Ubuntu 16.04</p><pre><code>/bin            #用户二进制文件/boot           #启动核心文件/dev            #设备文件/etc            #配置文件/home           #用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的/lib            #系统库/lib64          #系统库/lost+found     #这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件/media          #可移动媒体设备/mnt            #挂载目录/opt            #用户安装的软件目录/proc           #进程信息/root           #该目录为系统管理员，也称作超级权限者的用户主目录/run            #存放进程的I/sbin           #s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序/tmp            #系统临时文件/srv            #srv是service的缩写，该目录存放一些服务启动之后需要提取的数据/sys            #这个目录跟/proc 非常类似，也是一个虚拟的文件系统，主要也是记录与内核相关的信息。/usr            #注意 usr 并不是 user 的缩写，而是Unix Software Resource的缩写，即 Unix 操作系统软件资源放在该目录，而不是用户的数据。/var            #软件运行所产生的文件</code></pre><p>补充: 其他 <code>Linux</code> 系统的发行版目录大致一致</p><p>cd-ls pwd </p><h4><span id="cd-命令-change-dirname-的缩写形式进入指定目录">cd 命令 change dirname 的缩写形式，进入指定目录</span></h4><pre><code>cd /usr/local #进入 /usr/local 目录cd / #进入 / 目录cd ~ #进入当前用户家目录cd - #进入执行上一条命令所在目录cd ../ #进入当前目录的上一级目录</code></pre><p>补充：<code>.</code> 代表当前目录，<code>..</code> 代表上一级目录，<code>~</code> 代表当前用户的家目录，<code>/</code> 代表根目录，根目录的上一级目录指向的还是根目录。推荐安装autojump插件进行目录跳转</p><p>关于文件名的重要规则</p><blockquote><ol><li>以 “.” 字符开头的文件名是隐藏文件。这仅表示，ls 命令不能列出它们， 用 ls -a 命令就可以了。当你创建帐号后，几个配置帐号的隐藏文件被放置在 你的家目录下。稍后，我们会仔细研究一些隐藏文件，来定制你的系统环境。 另外，一些应用程序也会把它们的配置文件以隐藏文件的形式放在你的家目录下面。</li></ol><ol start="2"><li>文件名和命令名是大小写敏感的。文件名 “File1” 和 “file1” 是指两个不同的文件名。</li></ol><ol start="3"><li>Linux 没有“文件扩展名”的概念，不像其它一些系统。可以用你喜欢的任何名字 来给文件起名。文件内容或用途由其它方法来决定。虽然类 Unix 的操作系统， 不用文件扩展名来决定文件的内容或用途，但是有些应用程序会。</li></ol><ol start="4"><li>虽然 Linux 支持长文件名，文件名可能包含空格，标点符号，但标点符号仅限 使用 “.”，“－”，下划线。最重要的是，不要在文件名中使用空格。如果你想表示词与 词间的空格，用下划线字符来代替。过些时候，你会感激自己这样做。</li></ol></blockquote><h4><span id="ls-命令-以列表的形式显示文件">ls 命令 以列表的形式显示文件</span></h4><pre><code>ls 显示当前目录的文件和目录，不包含隐藏文件ls -a 显示所有文件和目录，包含隐藏文件ls -l #显示文件和文件夹的详细信息ll #ls -l 命令的简写ls -A #只显示隐藏的文件和目录，不显示 . 和 ..ls -R dirname #递归显示目录的所有内容ls -t #按修改时间排序显示ls -lS #按文件从大到小排序ls -lh #将文件大小转成 b kb mb g 的形式ls -al #以长格式显示目录和文件的内容列表，包含隐藏文件。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等</code></pre><h4><span id="pwd-显示所在位置的命令-print-work-dirname-简写">pwd 显示所在位置的命令 print work dirname 简写</span></h4><pre><code>pwd #显示所在位置</code></pre><blockquote><p>用户与用户组</p></blockquote><h5><span id="user-group">user-group</span></h5><h4><span id="users-命令">users 命令</span></h4><pre><code>users #查看当前在线的用户名称列表</code></pre><h4><span id="用户分-3-种">用户分 3 种</span></h4><ol><li>root 用户，即是超级管理员</li><li>拥有root权限的用户，可以执行 sudo 命令</li><li>普通用户</li></ol><h4><span id="用户文件与配置">用户文件与配置</span></h4><ul><li>/etc/password</li><li>/etc/shadow</li></ul><h4><span id="adduser命令">adduser命令</span></h4><pre><code>adduser demo #添加账号</code></pre><ul><li>补充：此命令在 CentOS7.2 系统中为软连接，源目标是 adduser 命令。在 Ubuntu16.04 中是独立的命令，添加账号时会有友好的提示，设置密码账号信息等</li></ul><h4><span id="useradd-命令">useradd 命令</span></h4><pre><code>useradd demo #添加用户，默认家目录在 /home/ 目录下 demo 目录，与用户名一致passwd demo #设置密码，默认添加用户之后没设置密码不允许登录useradd -u 2333 demo #添加用户并指定用户 id ，一般情况很少使用useradd -d /home/testuser demo #添加用户并指定家目录，一般情况很少使用useradd -G xxx,xxx demo #添加用户并加入多个附加组</code></pre><h4><span id="usermod-命令">usermod 命令</span></h4><pre><code>usermod -L demo #锁定用户，不允许登录，相当于手动修改 /etc/shadow 文件中用户密码前加入 ! 一个感叹号usermod -U demo #解除锁定</code></pre><h4><span id="userdel-命令">userdel 命令</span></h4><pre><code>userdel demo #删除用户，不删除用户家目录数据userdel -r demo #删除用户并删除用户家目录userdel -rf demo #强制删除用户无论是否登录，并删除用户家目录</code></pre><h4><span id="passwd-目录">passwd 目录</span></h4><pre><code>passwd -l demo #锁定用户，不允许登录，相当于手动修改 /etc/shadow 文件中用户密码前加入 !! 双感叹号passwd -u demo #解除锁定</code></pre><h4><span id="groups-命令">groups 命令</span></h4><pre><code>groups #查看当前用户的用户组名称</code></pre><h4><span id="用户组分两种">用户组分两种</span></h4><ol><li>初始组(默认组)</li><li>其他组(附加组)</li></ol><h4><span id="用户组文件与配置">用户组文件与配置</span></h4><ul><li>/etc/group</li><li>/etc/gshadow</li></ul><h4><span id="addgroup-命令">addgroup 命令</span></h4><pre><code>groupadd test #添加用户组</code></pre><h4><span id="groupmod-命令">groupmod 命令</span></h4><pre><code>groupmod -n new_test test #讲 test 组名修改为 new_test</code></pre><h4><span id="gpasswd-命令">gpasswd 命令</span></h4><pre><code>gpasswd -a nick new_test #将 nick 用户添加到 new_test 组gpasswd -d nick new_test #将 nick 用户从 new_test 组删除</code></pre><h4><span id="groupdel-命令">groupdel 命令</span></h4><pre><code>groupdel new_test #删除用户组</code></pre><p>补充：每添加一个用户会自动创建一个用户组，称为默认组或初始组，这个组是不允许删除的，默认组一般不修改最好，用户 id 也一样。</p><h4><span id="sudo-命令">sudo 命令</span></h4><pre><code>sudo vim /etc/passwd #以另一个用户身份执行命令，通常是 root 用户</code></pre><p>补充：普通用户添加执行 <code>sudo</code> 的方法，在 <code>/etc/sudoers</code> 文件中添加 <code>username ALL=(ALL) ALL</code> 即可。</p><h4><span id="su-命令">su 命令</span></h4><pre><code>su   #切换到 root 用户，仅切换路径su - #切换到 root 用户，环境变量和路径一起切换su - nick #切换到 nick 用户，环境变量和路径一起切换</code></pre><h4><span id="whoami-命令">whoami 命令</span></h4><pre><code>whoami #查看当前用户的名称</code></pre><h4><span id="id-命令">id 命令</span></h4><pre><code>id #查看当前用户的 id 、组 id 、附加组 id id -un #查看当前用户的名称id -g #当前用户的组 idid -G #当前用户的附加组 idid -u root #查看指定用户的 idid root #查看指定用户的 id gid groupsid</code></pre><h4><span id="who-命令">who 命令</span></h4><pre><code>who #查看当前的在线用户、终端号、IP、登录时间who -q #查看在线的用户的用户名，用户数</code></pre><blockquote><p>文件与目录</p></blockquote><p>file-dir</p><h4><span id="touch-命令">touch 命令</span></h4><pre><code>touch index.html #新建空文件</code></pre><h4><span id="mkdir-命令">mkdir 命令</span></h4><pre><code>mkdir demo #创建目录mkdir -p ~/python/flask #递归创建目录mkdir -m 755 www #创建目录并指定权限</code></pre><h4><span id="rmdir-命令">rmdir 命令</span></h4><pre><code>rmdir demo #删除空目录，如果目录有文件无法删除</code></pre><h4><span id="cp-命令">cp 命令</span></h4><pre><code>cp index.html html5 #复制 index.html 文件到当前 html5 目录下cp -a index.html html5 #复制 index.html 文件到当前 html5 目录下,保留文件的属性、权限、软连接自动指向目标文件cp index.html ~/app.html5 #复制文件到指定目录下并修改文件名cp -R html5 html #递归复制 html5 目录下所有文件到 html 目录</code></pre><h4><span id="mv-命令">mv 命令</span></h4><pre><code>mv index.html html5.html #将 index.html 名称更改为 html5.htmlmv ~/python /home #将家目录下 python 目录移动到根目录 home 目录下</code></pre><h4><span id="rm-命令">rm 命令</span></h4><pre><code>rm index.html #删除文件rm -i index.html #执行删除询问 y 代表删除 n 代表取消rm -r test #递归删除目录rm -f test #强制删除目录rm -rf python #强制递归删除目录</code></pre><h4><span id="unlink">unlink</span></h4><pre><code>unlink demo.php #删除文件，与 rm 类似，但只能删除文件</code></pre><h4><span id="tree-命令">tree 命令</span></h4><pre><code>tree ~ #以树状图列出指定目录的内容tree -d laravel #以树状图列出指定目录的内容，不包括文件tree ~/test -H &#39;目录结构&#39; -o out.html --nolinks #将内容以树状形式写入到 HTML 文件中，不包含链接</code></pre><h4><span id="file-命令">file 命令</span></h4><pre><code>file demo.php #查看文件格式类型</code></pre><blockquote><p>文件目录权限</p></blockquote><p>file-dir-permissions</p><h4><span id="linux-的文件类型">Linux 的文件类型</span></h4><ol><li>普通文件, 符号为 <code>-</code></li><li>目录, 符号为 <code>d</code></li><li>字符设备，符号为 <code>c</code></li><li>块装备，符号为<code>b</code></li><li>套接字文件 符号为<code>c</code></li><li>软链接文件，类似 <code>Windows</code> 系统的快捷方式，删除了并不会影响源文件，符号为 <code>l</code></li><li>管道文件，符号为 <code>p</code></li></ol><p>补充：常见的文件类型为 <code>-</code> <code>d</code> <code>l</code></p><h4><span id="linux-的-3-种权限">Linux 的 3 种权限</span></h4><ul><li><code>r</code> 代表 <code>read</code> 读权限，数字代表为 <code>4</code></li><li><code>w</code> 代表 <code>wirte</code> 写权限，数字代表为 <code>2</code></li><li><code>x</code> 代表 <code>execute</code> 执行权限，数字代表为 <code>1</code></li></ul><h4><span id="linux-的-3-种用户">Linux 的 3 种用户</span></h4><ul><li>拥有者（owner)</li><li>用户组（group）</li><li>其它人（others）</li></ul><h4><span id="解读">解读</span></h4><pre><code>-rw-rw-r-- 1 nick nick 0 May 12 16:05 demo.html- 第 1 列代表文件类型rw- 第 2-4 列代表所属用户的权限rw- 第 5-7 列代表所属用户组的权限r-- 第 8-11 其他用户所属权限1 第 11 列代表文件被引用的次数nick 第 12 列代表文件所属用户名称nick 第 13 列代表文件所属用户组名称0 第 14 列代表文件大小May 12 16:05 第 15-17 列代表文件最后的修改时间demo.html 第 18 列代表文件名称</code></pre><h3><span id="stat-命令">stat 命令</span></h3><pre><code>stat filename #查看文件的详细信息，文件的访问时间、修改时间、改变时间，linux 文件没有创建时间</code></pre><h4><span id="chmod-命令">chmod 命令</span></h4><pre><code>chmod 755 filename #将文件权限修改为 755 ,即拥有者有读写执行权限，用户组有读执行权限，其他人有读执行权限 chmod -R 755 dirname #递归修改目录的权限</code></pre><h4><span id="chown-命令">chown 命令</span></h4><pre><code>chown nick index.html #将文件拥有者改为 nickchown :nick index.html #将文件用户组修改为 nickchown nick:nick index.html #将文件拥有者和用户组修改为 nickchown nick python #将目录拥有者修改为 nickchown :nick python #将目录用户组修改为 nickchown nick:nick python #将目录拥有者和用户组修改为 nickchown -R nick:nick python #递归将目录拥有者和用户组修改为 nick</code></pre><h4><span id="chgrp-命令">chgrp 命令</span></h4><pre><code>chgrp nick demo #改变目录的所属用户组chgrp nick test.html #改变文件的所属用户组chgrp -R nick demo #递归改变目录的所属用户组</code></pre><h4><span id="umask-命令">umask 命令</span></h4><p>默认的补码为 022 ,补码越小权限越大，补码的计算规则为 rwx 读写执行即 777 减补码是权限数字 root 的 umask 为 022 ，创建的目录或文件为 755 rwxr-xr-x 权限 普通用户的 umask 为 002 ，创建的目录或文件为 775 rwxrwxr-x 权限 最大权限减 umask 等于默认权限，结果为奇数，则奇数位 +1</p><pre><code>umask #查看权限补码umask -S #查看当前用户权限补码</code></pre><h4><span id="chattr-命令">chattr 命令</span></h4><pre><code>chattr +i index.php #设置文件不允许修改、删除、移动、复制，root 用户也生效chattr -i index.php #取消文件属性设置chattr +i demo #设置目录属性，目录内的文件目录只能修改，不能新建与修改，子目录的文件目录不生效，目录层级只有一层</code></pre><h4><span id="lsattr-命令">lsattr 命令</span></h4><pre><code>lsattr filename  #查看文件属性lsattr -d demo #查看目录属性lsattr -R demo #递归查看目录属性lsattr -a demo #查看所有目录文件隐藏文件</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2018/07/23/docker-ji-chu-ming-ling-zong-jie/"/>
      <url>/2018/07/23/docker-ji-chu-ming-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3><span id="docker-基础命令总结">docker 基础命令总结</span></h3><h4><span id="一-操作系统要求">一 操作系统要求</span></h4><p>服务器系统: 阿里云centos 7  Mac命令行软件 mac SSH Shell  安装docker-ce版本 ee 为商业版</p><h5><span id="首先卸载旧版本">首先卸载旧版本</span></h5><p>较旧版本的Docker被称为<code>docker</code>或<code>docker-engine</code>。如果已安装这些，请卸载它们以及相关的依赖项。</p><pre class=" language-dockerfile"><code class="language-dockerfile">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-engine</code></pre><p>官方推荐安装Docker CE 之前,需要设置Docker存储库,并可以在存储库安装和更新docker</p><h5><span id="设置存储库">设置存储库</span></h5><ul><li>安装所需要的包。yum-utils提供了 yum-config-manager并<code>device-mapper-persistent-data</code>和<code>lvm2</code>由需要 <code>devicemapper</code>存储驱动程序。执行以下命令</li></ul><pre class=" language-dockerfile"><code class="language-dockerfile">  sudo yum install -y yum-utils \  device-mapper-persistent-data \  lvm2</code></pre><ul><li>使用以下命令设置<strong>稳定</strong>存储库。</li></ul><pre><code>sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><h5><span id="安装docker-ce">安装DOCKER CE</span></h5><ul><li>安装最新版本的Docker CE</li></ul><pre><code>sudo yum install docker-ce</code></pre><ul><li>启动Docker。</li></ul><pre><code>sudo systemctl start docker</code></pre><ul><li><code>docker</code>通过运行<code>hello-world</code> 映像验证是否已正确安装。</li></ul><pre class=" language-dockerfile"><code class="language-dockerfile">sudo docker run hello-world</code></pre><p>如果出现此界面 则证明docker已经配置成功</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ft5rkrok5fj31cq0pojwd.jpg" alt="image-20180711113153662"></p><p>启动docker命令</p><pre class=" language-dockerfile"><code class="language-dockerfile"> systemctl start docker</code></pre><p> 开机并启动docker</p><pre class=" language-dockerfile"><code class="language-dockerfile">systemctl enable docker</code></pre><p>查看docker版本</p><pre><code>docker -v</code></pre><p>如果遇到命令执行没有权限，统一在前面加上sudo</p><blockquote><p>docker安装时默认创建了docker用户组，将普通用户加入docker用户组就可以不使用sudo来操作docker   sudo usermod – aG docker xxxx(这里的xxxx替换成你自己的用户名),注意，光加入还不行，要么重新登录，要么执行newgrp-docker改变当前用户的有效群组</p></blockquote><p>查看镜像</p><pre><code>docker  images</code></pre><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ft6sqcq8qzj31jo09gdhz.jpg" alt="image-20180712075217972"></p><h4><span id="内置镜像">内置镜像</span></h4><p>一些外国人制作好的一些镜像环境，可以直接去使用, 可以直接搜索<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><p>由于国内被墙问题，根本下载不了，或者速度非常慢，于是我们要配置国内镜像，我们可以使用阿里云的，其他镜像源，例如网易蜂巢等等，可以自行搜索。</p><p><a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">https://dev.aliyun.com/search.html</a></p><p>进入右上角的管理中心</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ft6sq5qhtmj31kw0nhwkv.jpg" alt="image-20180712080426309"></p><p>设置我们的镜像加速器 下图是官方文档的解释</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ft6r8l9864j31140gyadr.jpg" alt="image-20180712080556725"></p><p>命令解释</p><pre class=" language-dockerfile"><code class="language-dockerfile">sudo mkdir - p /etc/docker #如果文件夹不存在则手动创建一个 一般都会存在 docker的文件夹sudo tee /etc/docker/daemon.json <<-'eof' #利用tee命令把下面的配置写入 deamon.json { "registry-mirrors": ["https: 3ai83fdd.mirror.aliyuncs.com"]#这里的地址改成自己的镜像加速地址 } eof sudo systemctl daemon-reload # 重载所有修改过的配置文件，扫描新的或有变动的单元 restart docker #重启docker #补充systemctl命令，自centos7.x开始， centos开始使用systemd服务来代替daemon,譬如之前是service xxx start 而现在是 xxx) < code></-'eof'></code></pre><p>打开镜像搜索页面 搜索关键字php</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ft6rl3zsvmj31kw0o4ae9.jpg" alt="image-20180712081801730"></p><p>找到这个镜像</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ft6rlkckt7j31h80dq0ur.jpg" alt="image-20180712081830144"></p><p>如何下载镜像 进入镜像详情复制地址</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ft6ro56q0sj318o0bswg9.jpg" alt="image-20180712082059144"></p><p>在命令行输入</p><pre class=" language-dockerfile"><code class="language-dockerfile">docker pull registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5</code></pre><p>然后输入docker images 查看当前镜像 出现此图代表已经拉取镜像成功</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ft6rr4n8x0j31jm08mac4.jpg" alt="image-20180712082351378"></p><p>镜像已经有了，下一步我们来启动它</p><pre class=" language-dockerfile"><code class="language-dockerfile">docker run -d -p 8080:80 名称或者idrun:把我们的镜像放入容器中(只有第一次运行时)-d 启动容器后台运行，并返回ID;-p 把容器的80端口映射到宿主机的8080</code></pre><pre class=" language-dockerfile"><code class="language-dockerfile">docker run -d -p 8080:80 registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5</code></pre><p>列出当前启动的容器</p><pre class=" language-dockerfile"><code class="language-dockerfile">docker ps</code></pre><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ft6s57g1mcj31kw07240l.jpg" alt="image-20180712083722901"></p><p>停掉当前容器</p><p>docker stop 容器的id  停止容器</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ft6scajy71j30wm03uaau.jpg" alt="image-20180712084411325"></p><p>然后输入 docker ps  查看当前活动的容器 已经没有了</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ft6sdm9dodj31kw049my4.jpg" alt="image-20180712084527855"></p><p>docker ps  -a  查看所有的容器</p><p>  如果不能访问 输入此命令防火墙放行8080端口 </p><pre class=" language-dockerfile"><code class="language-dockerfile">sudo  iptables  -I  INPUT -p  tcp  --dport 8080 -j  ACCEPT</code></pre><p>如果出现 IPV4  forwarding disabled, Networking will not work.</p><p>解决办法:</p><p>sudo vi/etc/sysctl.conf (Linux内核参数配置，可在运行时修改某些内核参数, 使之永久生效)</p><p>加入 net.ipv4.ip_forward=1</p><p>保存并退出 执行systemctl restart network</p><p>正常运行在地址栏输入服务器ip+端口号就会出现如下图界面代表成功</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ft6sox9phrj31kw0ys49l.jpg" alt="image-20180712085609975"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
